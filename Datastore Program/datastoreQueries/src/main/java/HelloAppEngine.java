import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.*;

import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.EntityNotFoundException;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.datastore.Transaction;
import com.google.appengine.api.datastore.TransactionOptions;

@WebServlet(
    name = "HelloAppEngine",
    urlPatterns = {"/hello"}
)
public class HelloAppEngine extends HttpServlet {

  /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

@Override
  public void doGet(HttpServletRequest request, HttpServletResponse response) 
      throws IOException {
      
    response.setContentType("text/html");
    response.setCharacterEncoding("UTF-8");
    PrintWriter out = response.getWriter();
    out.print("<h3>CRUD OPERATIONS IN DATASTORE!</h3><br>");
    out.println("<h4><a href = '/showQueryOperations'>Show Query Operations in Datastore</a></h4>");
    
    //Datastore Instantiation
    		DatastoreService datastore= DatastoreServiceFactory.getDatastoreService();
    
    //creating Entity with out Id (Numeric id will be generated by datastore)
    // allow duplication in datastore
    		
    		System.out.println("Pushing entity without custom Id\n");
		    Entity studentEntity1 = new Entity("Student");
		    studentEntity1.setProperty("name", "Ajay");
		    studentEntity1.setProperty("age", 18);
		    studentEntity1.setProperty("class", 8);
		    studentEntity1.setProperty("place", "Chennai");
		    System.out.println(studentEntity1);
		    
	//storing entity to the datastore
    
    		datastore.put(studentEntity1);
    
    //creating Entity  with custom Id
    		
    		System.out.println("\nEntity added with custom Id\n");
		    Entity teacher1 = new Entity("Teacher","TH001");
		    teacher1.setProperty("teacherName", "Raju");
		    teacher1.setProperty("age",56);
		    teacher1.setProperty("subject", "English");
		    System.out.println(teacher1);
		    
    //adding entity to datastore
    		datastore.put(teacher1);
    		
    		System.out.println("\nEntity added with custom Id\n");
		    Entity studentEntity2 = new Entity("Student", "ST001");
		    studentEntity2.setProperty("name", "Vinoth");
		    studentEntity2.setProperty("age", 15);
		    studentEntity2.setProperty("class", 9);
		    studentEntity2.setProperty("place", "Tharamani");
		    System.out.println(studentEntity2);
		    
    //adding Entity to datastore
    		datastore.put(studentEntity2);
    
    //creating entity with parent entity by passing the key of the another entity as agrument
    		
    		System.out.println("\nCreated with a parent entity 'teacher'\n");
		    Entity studentEntity3 = new Entity("Student", "ST002", teacher1.getKey());
		    studentEntity3.setProperty("name", "Harish");
		    studentEntity3.setProperty("age", 12);
		    studentEntity3.setProperty("class", 5);
		    studentEntity3.setProperty("place", "Besant Nagar");
		    System.out.println(studentEntity3);
		    
    //adding entity to the datastore
    		datastore.put(studentEntity3);
    
    //updating the properties of the entities"
    		
    		System.out.println("\nUpdating the properties of the existing entity\n");
		    studentEntity3.setProperty("name", "Harish Kumar");
		    System.out.println("Name property is changed to 'Harish' to 'Harish Kumar'");
		    System.out.println(studentEntity3);
		    datastore.put(studentEntity3);
		    
    //creating Key and creating Entity.
    
		    Key studentKey = KeyFactory.createKey("Student", "ST003");
		    System.out.println(studentKey);
		    
		    Entity studentEntity4 = new Entity("Student", "ST003");
		    studentEntity4.setProperty("name", "Michel Raj");
		    studentEntity4.setProperty("age", 13);
		    studentEntity4.setProperty("class", 10);
		    studentEntity4.setProperty("place", "Alandur");
		    
    //adding entity to datastore
    
		    System.out.println(datastore.put(studentEntity4));
		    
	//adding multiple entities to datastore as a batch
		    
		    System.out.println("\nAdding multiple entities as a batch\n");
		    Entity studentEntity5 = new Entity("Student", "ST005");
		    studentEntity5.setProperty("name", "Sanjay");
		    studentEntity5.setProperty("age", 10);
		    studentEntity5.setProperty("class", 6);
		    studentEntity5.setProperty("place", "Velachery");
		    
		    Entity studentEntity6 = new Entity("Student", "ST006", teacher1.getKey());
		    studentEntity6.setProperty("name", "Vishnu");
		    studentEntity6.setProperty("age",17);
		    studentEntity6.setProperty("class", 11);
		    studentEntity6.setProperty("place", "T.Nagar");
		    
		    Entity studentEntity7 = new Entity("Student", "ST007");
		    studentEntity7.setProperty("name", "Kishore");
		    studentEntity7.setProperty("age", 9);
		    studentEntity7.setProperty("class", 12);
		    studentEntity7.setProperty("place", "Saidapet");
		    
		    List<Entity>studentList = new ArrayList<>();
		    studentList.add(studentEntity5);
		    studentList.add(studentEntity6);
		    studentList.add(studentEntity7);
		    
		    datastore.put(studentList);
    
    //Deleting entity from the datastore
		    
		    System.out.println("\nStudent entity 2 is deleted\n");
		    datastore.delete(studentEntity2.getKey());
		    
	//getting value from the datastore
		    
		    System.out.println("\nShowing student entity using get function\n");
		    try {
				System.out.println(datastore.get(studentEntity6.getKey()));
			} catch (EntityNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    
	//Datastore Transactions
		    
			System.out.println("\nDatastore transaction\n");
			Transaction doTransaction = datastore.beginTransaction();
			try {
				Entity teacher2 = new Entity("Teacher", "TH002");
				 teacher2.setProperty("teacherName", "Mary");
				 teacher2.setProperty("age",43);
				 teacher2.setProperty("subject", "Science");
				 System.out.println(teacher2);
				 datastore.put(teacher2);
				 doTransaction.commit();
			}
			finally {
				if(doTransaction.isActive()) {
					doTransaction.rollback();
				}
			
			}
			
			System.out.println("\nTransactions on cross group entities\n");
			TransactionOptions txnOptions = TransactionOptions.Builder.withXG(true);
			Transaction doTransaction1 = datastore.beginTransaction(txnOptions);
			try {
				Entity teacher3 = new Entity("Teacher", "TH002");
				 teacher3.setProperty("teacherName", "Vinith");
				 teacher3.setProperty("age",38);
				 teacher3.setProperty("subject", "Maths");
				 datastore.put(doTransaction1, teacher3);
				 System.out.println(teacher3);
				 
				 Entity schoolEntity = new Entity("School", "SC001");
				 schoolEntity.setProperty("schoolName", "abcd School");
				 schoolEntity.setProperty("Board", "CBSE");
				 schoolEntity.setProperty("Place", "Thirunvanmiyur");
				 datastore.put(doTransaction1, schoolEntity);
				 doTransaction1.commit();
			}
			finally {
				if(doTransaction1.isActive()) {
						doTransaction1.rollback();
			}
			}
}
}